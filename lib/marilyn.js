(function(factory) {

	// define marilyn using AMD
	if (typeof define === 'function' && define.amd) {
		define(['underscore'], factory);
	}

	// define marilyn by adding it to the window object
	else {
		window.Marilyn = window.marilyn = factory(_);
	}

})(function(_) {

	// _socketConnection should be shared between all the models
	// it's a single connection to the server
	var _socketConnection;

	// the socket.io on function isn't avalible until Marilyn gets the socketConnection
	// after it gets this connection all the on events need to get attached to socket.io
	var _onEventBuffer = {};

	// the socket.io emit function isn't avalible until Marilyn gets the socketConnection
	// after it gets this connection all the emit events need to get sent to socket.io
	var _emitEventBuffer = [];

	// the is where all the models will be stored so getters can be used to retrieve them
	var _models = {};

	// get a Model from the global Marilyn object
	var _modelGet = function(modelName) {
		return _models[modelName];
	};

	// create a Model and assign it to the global Marilyn object
	var _modelSet = function(modelName, init) {

		// this is for saving changes to the result generated by read and readOne
		var _resultSave = function(callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			// saveType is used to determine which receiver to fire
			var saveType;

			var runCallback = function(err, result) {

				// this is needed to send an object
				if (saveType === 'create') {
					Model.inform('create', result);
				}

				// this is needed to send an array
				else if (saveType === 'update') {
					Model.inform('update', [result]);
				}

				Model.inform('save', result);

				// call the callback that was passed into the save
				// the Model becomes the "this" variable
				callback.call(Model, err, result);

			};

			var runSaves = function(err, result) {

				// check if there are any afters assigned to the save
				if (Model._afters.hasOwnProperty('save')) {

					// call the after save callback
					// the Model becomes the "this" variable
					Model._afters.save.call(Model, result, function() {
						runCallback(err, result);
					});

				} else {
					runCallback(err, result);
				}

			};

			var runUpdateComplete = function(object) {

				Model.updateSilent({
					'__id': object.__id
				}, object, function(err, results) {

					var result = results[0];

					// check if there are any afters assigned to the update
					if (Model._afters.hasOwnProperty('update')) {

						// call the adfter update callback
						// the Model becomes the "this" variable
						Model._afters.update.call(Model, results, function() {
							runSaves(err, result);
						});

					} else {
						runSaves(err, result);
					}

				});

			};

			var runCreateComplete = function(object) {

				Model.createSilent(object, function(err, result) {

					// check if there are any afters assigned to the create
					if (Model._afters.hasOwnProperty('create')) {

						// call the after create callback
						// the Model becomes the "this" variable
						Model._afters.create.call(Model, object, function() {
							runSaves(err, result);
						});

					} else {
						runSaves(err, result);
					}

				});

			};

			// run the correct CRUD method
			var runCRUD = function(object) {

				// CREATE
				// this object is being newly created
				if (!object.hasOwnProperty('__id')) {

					saveType = 'create';

					// check if there are any befores assigned to the create
					if (Model._befores.hasOwnProperty('create')) {

						// call the before create callback
						// the Model becomes the "this" variable
						Model._befores.create.call(Model, object, function() {
							runCreateComplete(object);
						});

					} else {
						runCreateComplete(object);
					}

				}

				// UPDATE
				// check if the object has come from a read and needs to be updated
				else {

					saveType = 'update';

					// check if there are any befores assigned to the update
					if (Model._befores.hasOwnProperty('update')) {

						// call the before update callback
						// the Model becomes the "this" variable
						Model._befores.update.call(Model, {
							'__id': object.__id
						}, object, function() {
							runUpdateComplete(object);
						});

					} else {
						runUpdateComplete(object);
					}

				}

			};

			// "this" is the result or a new object being created
			var _this = this || {};

			// the save can save a new or existing object using the create or update methods
			// this should trigger the correct befores and afters
			// it should always trigger all the before saves and after saves regardless of it being a create or update

			// check if there are any befores assigned to the save
			if (Model._befores.hasOwnProperty('save')) {

				// call the before save callback
				// the Model becomes the "this" variable
				Model._befores.save.call(Model, _this, function() {
					runCRUD(_this);
				});

			} else {
				runCRUD(_this);
			}

		};

		var _resultDelete = function(callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			// "this" will always reference the item being deleted
			Model.del(this, callback);

		};

		var _resultDeleteSilent = function(callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			// "this" will always reference the item
			Model.delSilent(this, callback);

		};

		// this Model function will be what contains all the CRUD functions
		// it is an function so we can use the "new" keyword to create one
		var Model = _models[modelName] = function(object) {

			object = object || {};

			// add additional methods to the object
			object.save = _resultSave;

			// we don't need to add the delete methods
			// they get added when the save method is called

			return object;

		};

		// PRIVATE PROPERTIES

		// setup the private variables of the Model
		// collection will store all the data in the Model
		Model._collection = [];
		Model._id = 0;

		Model._befores = {};
		Model._afters = {};

		Model._receivers = {};

		Model._name = modelName;

		// PRIVATE METHODS

		Model._nextId = function() {
			Model._id++;
			return Model._id;
		};

		// PUBLIC METHODS

		// Socket.IO events

		Model.on = function(eventType, callback) {

			// if the socketConnection is not setup the ons need to get buffered and applied later
			if (!_socketConnection) {

				// set the Model name property if not already set
				if (!_onEventBuffer.hasOwnProperty(Model._name)) {
					_onEventBuffer[Model._name] = {};
				}

				// set the callback into the onBuffer object
				_onEventBuffer[Model._name][eventType] = callback;

			} else {

				_socketConnection.on(eventType, function(data) {
					callback.call(Model, data);
				});

			}

		};

		Model.emit = function(eventType, data, data2) {

			// if the socketConnection is not setup the emits need to get buffered and sent later
			if (!_socketConnection) {

				// push the event and data into the emitBuffer object
				_emitEventBuffer.push([eventType, data, data2]);

			} else {

				_socketConnection.emit(eventType, data, data2);

			}

		};

		// internal events

		Model.use = function(pluginCallback) {
			// call the plugin callback
			// the Model becomes the "this" variable
			pluginCallback.call(Model);
		};

		// listen for a before event
		Model.before = function(eventType, callback) {

			// the event was a single event
			// no need to setup multiple
			if (_.isString(eventType)) {
				Model._befores[eventType] = callback;
			}

			// multiple events were passed in
			else if (_.isArray(eventType)) {
				_.each(eventType, function(key) {
					Model._befores[key] = callback;
				});
			}

		};

		// remove a before event listener
		Model.beforeRemove = function(eventType) {

			// the event was a single event
			// no need to remove multiple
			if (_.isString(eventType)) {
				Model._befores[eventType] = function() {};
			}

			// multiple events were passed in
			else if (_.isArray(eventType)) {
				_.each(eventType, function(key) {
					Model._befores[key] = function() {};
				});
			}

		};

		// listen for an after event
		Model.after = function(eventType, callback) {

			// the event was a single event
			// no need to setup multiple
			if (_.isString(eventType)) {
				Model._afters[eventType] = callback;
			}

			// multiple events were passed in
			else if (_.isArray(eventType)) {
				_.each(eventType, function(key) {
					Model._afters[key] = callback;
				});
			}

		};

		// remove an after event listener
		Model.afterRemove = function(eventType) {

			// the event was a single event
			// no need to remove multiple
			if (_.isString(eventType)) {
				Model._afters[eventType] = function() {};
			}

			// multiple events were passed in
			else if (_.isArray(eventType)) {
				_.each(eventType, function(key) {
					Model._afters[key] = function() {};
				});
			}

		};

		// trigger a receive
		Model.inform = function(eventType, data) {
			if (Model._receivers[eventType]) {
				// call the receiver callback
				// the Model becomes the "this" variable
				Model._receivers[eventType].call(Model, data);
			}
		};

		// listen for an inform
		Model.receive = function(eventType, callback) {

			// the event was a single event
			// no need to setup multiple
			if (_.isString(eventType)) {
				Model._receivers[eventType] = callback;
			}

			// multiple events were passed in
			else if (_.isArray(eventType)) {
				_.each(eventType, function(key) {
					Model._receivers[key] = callback;
				});
			}

		};

		// remove a receive event listener
		Model.receiveRemove = function(eventType) {

			// remove all receivers if the event type is not specified
			if (_.isEmpty(eventType)) {

				Model._receivers = {};

			}

			// remove specific receivers
			else {

				// the event was a single event
				// no need to remove multiple
				if (_.isString(eventType)) {
					Model._receivers[eventType] = function() {};
				}

				// multiple events were passed in
				else if (_.isArray(eventType)) {
					_.each(eventType, function(key) {
						Model._receivers[key] = function() {};
					});
				}

			}

		};

		// query methods

		// replaces the internal collection with a new array of objects
		// this will add an __id property
		// it will also change the collection in a data binding friendly way
		Model.collection = function(collection) {

			// check if the collection is an array
			if (!_.isArray(collection)) {
				// TODO throw error
				return;
			}

			// replace the collection like this for data binding
			while (Model._collection.length > 0) {
				Model._collection.pop();
			}

			for (var i = 0, j = collection.length; i < j; i++) {
				collection[i].__id = Model._nextId();
				Model._collection.push(collection[i]);
			}

		};

		// CREATE

		Model.create = function(element, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var runCallback = function(err, result) {

				Model.inform('create', result);

				// call the callback that was passed into the create
				// the Model becomes the "this" variable
				callback.call(Model, err, result);

			};

			var runComplete = function() {

				Model.createSilent(element, function(err, result) {

					// check if there are any afters assigned to the create
					if (Model._afters.hasOwnProperty('create')) {

						// call the after create callback
						// the Model becomes the "this" variable
						Model._afters.create.call(Model, element, function() {
							runCallback(err, result);
						});

					} else {
						runCallback(err, result);
					}

				});

			};

			// check if there are any befores assigned to the create
			if (Model._befores.hasOwnProperty('create')) {

				// call the before create callback
				// the Model becomes the "this" variable
				Model._befores.create.call(Model, element, function() {
					runComplete();
				});

			} else {
				runComplete();
			}

		};

		Model.createSilent = function(element, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var err = null;

			// set the internal id using the Model's next id
			element.__id = Model._nextId();

			// allow the returned object to be saved in the future
			element.save = _resultSave;

			element.del = function(callback) {
				_resultDelete.call(element, callback);
			};

			element.delSilent = function(callback) {
				_resultDeleteSilent.call(element, callback);
			};

			element['delete'] = element.del;
			element.deleteSilent = element.delSilent;

			Model._collection.push(element);

			// call the callback that was passed into the createSilent
			// the Model becomes the "this" variable
			callback.call(Model, err, element);

		};

		// READ

		Model.read = function(query, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var runCallback = function(err, results) {

				Model.inform('read', results);

				// call the callback that was passed into the read
				// the Model becomes the "this" variable
				callback.call(Model, err, results);

			};

			var runComplete = function() {

				Model.readSilent(query, function(err, results) {

					// check if there are any afters assigned to the read
					if (Model._afters.hasOwnProperty('read')) {

						// call the after read callback
						// the Model becomes the "this" variable
						Model._afters.read.call(Model, results, function() {
							runCallback(err, results);
						});

					} else {
						runCallback(err, results);
					}

				});

			};

			// check if there are any befores assigned to the read
			if (Model._befores.hasOwnProperty('read')) {

				// call the before read callback
				// the Model becomes the "this" variable
				Model._befores.read.call(Model, query, function() {
					runComplete();
				});

			} else {
				runComplete();
			}

		};

		Model.readSilent = function(query, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var err = null;

			var readAll = false;

			// if no query was passed
			if (typeof query === 'function') {
				callback = query;
				readAll = true;
			}

			// or if the query object was empty
			else if (_.isEmpty(query)) {
				readAll = true;
			}

			var results = [];

			if (readAll) {
				results = Model._collection;
			} else {
				results = _.where(Model._collection, query);
			}

			// add additional methods to the results
			_.each(results, function(result) {

				result.save = _resultSave;

				result.del = function(callback) {
					_resultDelete.call(result, callback);
				};

				result.delSilent = function(callback) {
					_resultDeleteSilent.call(result, callback);
				};

				result['delete'] = result.del;
				result.deleteSilent = result.delSilent;

			});

			// call the callback that was passed into the readSilent
			// the Model becomes the "this" variable
			callback.call(Model, err, results);

		};

		Model.readOne = function(query, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var runCallback = function(err, result) {

				Model.inform('readOne', result);

				// call the callback that was passed into the readOne
				// the Model becomes the "this" variable
				callback.call(Model, err, result);

			};

			var runComplete = function() {

				Model.readOneSilent(query, function(err, result) {

					// check if there are any afters assigned to the readOne
					if (Model._afters.hasOwnProperty('readOne')) {

						// call the after readOne callback
						// the Model becomes the "this" variable
						Model._afters.readOne.call(Model, result, function() {
							runCallback(err, result);
						});

					} else {
						runCallback(err, result);
					}

				});

			};

			// check if there are any befores assigned to the readOne
			if (Model._befores.hasOwnProperty('readOne')) {

				// call the before readOne callback
				// the Model becomes the "this" variable
				Model._befores.readOne.call(Model, query, function() {
					runComplete();
				});

			} else {
				runComplete();
			}

		};

		Model.readOneSilent = function(query, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var err = null;

			var results = _.where(Model._collection, query);

			var result = null;

			if (results[0]) {

				result = results[0];

				// add additonal methods to the result
				result.save = _resultSave;

				result.del = function(callback) {
					_resultDelete.call(result, callback);
				};

				result.delSilent = function(callback) {
					_resultDeleteSilent.call(result, callback);
				};

				result['delete'] = result.del;
				result.deleteSilent = result.delSilent;

			}

			// call the callback that was passed into the readOneSilent
			// the Model becomes the "this" variable
			callback.call(Model, err, result);

		};

		// UPDATE

		Model.update = function(query, changes, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var runCallback = function(err, results) {

				Model.inform('update', results);

				// call the callback that was passed into the update
				// the Model becomes the "this" variable
				callback.call(Model, err, results);

			};

			var runComplete = function() {

				Model.updateSilent(query, changes, function(err, results) {

					// check if there are any afters assigned to the update
					if (Model._afters.hasOwnProperty('update')) {

						// call the after update callback
						// the Model becomes the "this" variable
						Model._afters.update.call(Model, results, function() {
							runCallback(err, results);
						});

					} else {
						runCallback(err, results);
					}

				});

			};

			// check if there are any befores assigned to the update
			if (Model._befores.hasOwnProperty('update')) {

				// call the before update callback
				// the Model becomes the "this" variable
				Model._befores.update.call(Model, query, changes, function() {
					runComplete();
				});

			} else {
				runComplete();
			}

		};

		Model.updateSilent = function(query, changes, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var err = null;

			var results = _.where(Model._collection, query);

			if (results.length > 0) {

				_.each(results, function(element) {

					_.each(changes, function(value, key) {
						element[key] = value;
					});

				});

			}

			// call the callback that was passed into the updateSilent
			// the Model becomes the "this" variable
			callback.call(Model, err, results);

		};

		// DELETE

		Model.del = function(query, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var runCallback = function(err, results) {

				Model.inform('delete', results);

				// call the callback that was passed into the del
				// the Model becomes the "this" variable
				callback.call(Model, err, results);

			};

			var runComplete = function() {

				Model.deleteSilent(query, function(err, results) {

					// check if there are any afters assigned to the delete
					if (Model._afters.hasOwnProperty('delete')) {

						// call the after delete callback
						// the Model becomes the "this" variable
						Model._afters['delete'].call(Model, results, function() {
							runCallback(err, results);
						});

					} else {
						runCallback(err, results);
					}

				});

			};

			// check if there are any befores assigned to the delete
			if (Model._befores.hasOwnProperty('delete')) {

				// call the before delete callback
				// the Model becomes the "this" variable
				Model._befores['delete'].call(Model, query, function() {
					runComplete();
				});

			} else {
				runComplete();
			}

		};

		Model.delSilent = function(query, callback) {

			// check if the callback is a valid function
			callback = (callback && _.isFunction(callback)) ? callback : function() {};

			var err = null;

			var results = _.where(Model._collection, query);

			if (results.length > 0) {

				_.each(results, function(element) {

					var index = _.indexOf(Model._collection, element);
					Model._collection.splice(index, 1);

				});

			}

			// call the callback that was passed into the delSilent
			// the Model becomes the "this" variable
			callback.call(Model, err, results);

		};

		// aliases
		Model.find = Model.read;
		Model.findSilent = Model.readSilent;
		Model.findOne = Model.readOne;
		Model.findOneSilent = Model.readOneSilent;

		Model['delete'] = Model.del;
		Model.deleteSilent = Model.delSilent;

		// run the callback init function if it was passed passing the Model as the "this"
		init = (init && _.isFunction(init)) ? init : function() {};
		init.call(Model);

		return Model;

	};

	// create the marilyn object
	var marilyn = {};

	marilyn.VERSION = '0.16.5';

	marilyn.config = function(socketConnection) {

		_socketConnection = socketConnection;

		// setup the ons
		for (var model in _onEventBuffer) {

			for (var eventType in _onEventBuffer[model]) {

				// this has to be a self executing function to retain scope through dependency injection
				(function(model, eventType, callback) {

					_socketConnection.on(eventType, function(data) {
						callback.call(model, data);
					});

				})(_models[model], eventType, _onEventBuffer[model][eventType]);

			}

		}

		// send the emits
		for (var i = 0, j = _emitEventBuffer.length; i < j; i++) {
			_socketConnection.emit(_emitEventBuffer[i][0], _emitEventBuffer[i][1], _emitEventBuffer[i][2]);
		}

		_onEventBuffer = {};

	};

	marilyn.model = function(modelName, init) {
		if (_models[modelName] && !init) {
			return _modelGet(modelName);
		} else {
			return _modelSet(modelName, init);
		}
	};

	marilyn.modelRemove = function(modelName) {
		_models[modelName] = null;
	};

	marilyn.receiveRemove = function(modelName) {
		for (var model in _models) {
			_models[model].receiveRemove();
		}
	};

	return marilyn;

});